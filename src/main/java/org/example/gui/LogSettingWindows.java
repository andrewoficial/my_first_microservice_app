package org.example.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.apache.log4j.Logger;
import org.example.utilites.properties.MyProperties;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LogSettingWindows extends JDialog {
    private static final Logger log = Logger.getLogger(LogSettingWindows.class);
    private JPanel parametrPanel;
    private JCheckBox CB_needSyncSaving;
    private JButton btn_syncSave;
    private JTextField TF_timerLimit;
    private JTextField TF_windowLimit;
    private JCheckBox CB_dbgLogState;
    private JTextField TF_dbgLogSeparator;
    private JCheckBox CB_dbgLogOutputASCII;
    private JCheckBox CB_dbgLogOutputHEX;
    private JCheckBox CB_dbgLogInputHEX;
    private JCheckBox CB_dbgLogInputASCII;
    private JCheckBox CB_dbgLogInputParsed;
    private JButton btn_dbgLog_Save;
    private JCheckBox CB_csvLogState;
    private JTextField TF_csvLogSeparator;
    private JCheckBox CB_csvLogOutputASCII;
    private JCheckBox CB_csvLogInputASCII;
    private JCheckBox CB_csvLogInputParsed;
    private JButton btn_csvLog_Save;


    public LogSettingWindows(MyProperties prop) {
        $$$setupUI$$$();
        setModal(true);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setContentPane(parametrPanel);
        log.info("Открыто окно с параметрами ведения лога");
        CB_needSyncSaving.setSelected(prop.getNeedSyncSavingAnswer());
        TF_timerLimit.setText(String.valueOf(prop.getSyncSavingAnswerTimerLimitMS()));
        TF_windowLimit.setText(String.valueOf(prop.getSyncSavingAnswerWindowMS()));

        CB_csvLogState.setSelected(prop.isCsvLogState());
        TF_csvLogSeparator.setText(prop.getCsvLogSeparator());
        CB_csvLogOutputASCII.setSelected(prop.isCsvLogOutputASCII());
        CB_csvLogInputASCII.setSelected(prop.isCsvLogInputASCII());
        CB_csvLogInputParsed.setSelected(prop.isCsvLogInputParsed());

        CB_dbgLogState.setSelected(prop.isDbgLogState());
        TF_dbgLogSeparator.setText(prop.getDbgLogSeparator());
        CB_dbgLogOutputASCII.setSelected(prop.isDbgLogOutputASCII());
        CB_dbgLogOutputHEX.setSelected(prop.isDbgLogOutputHEX());
        CB_dbgLogInputASCII.setSelected(prop.isDbgLogInputASCII());
        CB_dbgLogInputHEX.setSelected(prop.isDbgLogInputHEX());
        CB_dbgLogInputParsed.setSelected(prop.isDbgLogInputParsed());

        btn_syncSave.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean needSyncSaving = CB_needSyncSaving.isSelected();
                if (needSyncSaving) {
                    prop.setNeedSyncSavingAnswer(true);
                    prop.setSyncSavingAnswerWindowMS(TF_windowLimit.getText());
                    prop.setSyncSavingAnswerTimerLimitMS(TF_timerLimit.getText());
                } else {
                    prop.setNeedSyncSavingAnswer(false);
                }
            }
        });


        btn_csvLog_Save.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean needCsvLog = CB_csvLogState.isSelected();
                if (needCsvLog) {
                    prop.setCsvLogState(true);
                    prop.setCsvLogSeparator(TF_csvLogSeparator.getText());
                    prop.setCsvLogOutputASCII(CB_csvLogOutputASCII.isSelected());
                    prop.setCsvLogInputASCII(CB_csvLogInputASCII.isSelected());
                    prop.setCsvLogInputParsed(CB_csvLogInputParsed.isSelected());

                } else {
                    prop.setCsvLogState(false);
                }
            }
        });

        btn_dbgLog_Save.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                boolean needDbgLog = CB_dbgLogState.isSelected();
                if (needDbgLog) {
                    prop.setDbgLogState(true);
                    prop.setDbgLogSeparator(TF_dbgLogSeparator.getText());
                    prop.setDbgLogOutputASCII(CB_dbgLogOutputASCII.isSelected());
                    prop.setDbgLogOutputHEX(CB_dbgLogOutputHEX.isSelected());
                    prop.setDbgLogInputASCII(CB_dbgLogInputASCII.isSelected());
                    prop.setDbgLogInputHEX(CB_dbgLogInputHEX.isSelected());
                    prop.setDbgLogInputParsed(CB_dbgLogInputParsed.isSelected());
                } else {
                    prop.setDbgLogState(false);
                }
            }
        });
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        parametrPanel = new JPanel();
        parametrPanel.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        parametrPanel.setInheritsPopupMenu(true);
        parametrPanel.setMaximumSize(new Dimension(1000, 1000));
        parametrPanel.setMinimumSize(new Dimension(500, 500));
        parametrPanel.setName("parametrPanel");
        parametrPanel.setPreferredSize(new Dimension(520, 520));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        parametrPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Допустимая разница в ответах, мс");
        panel2.add(label1, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Синхронизация ответов");
        panel2.add(label2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Максимальное время пропуска ответов");
        panel2.add(label3, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TF_timerLimit = new JTextField();
        panel2.add(TF_timerLimit, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        TF_windowLimit = new JTextField();
        panel2.add(TF_windowLimit, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        CB_needSyncSaving = new JCheckBox();
        CB_needSyncSaving.setText("");
        panel2.add(CB_needSyncSaving, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_syncSave = new JButton();
        btn_syncSave.setText("Сохранить");
        panel2.add(btn_syncSave, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(8, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Разделитель");
        panel3.add(label4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Ведение отладочного лога");
        panel3.add(label5, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Записывать исходящие команды ASCII");
        panel3.add(label6, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TF_dbgLogSeparator = new JTextField();
        panel3.add(TF_dbgLogSeparator, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btn_dbgLog_Save = new JButton();
        btn_dbgLog_Save.setText("Сохранить");
        panel3.add(btn_dbgLog_Save, new GridConstraints(7, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogState = new JCheckBox();
        CB_dbgLogState.setText("");
        panel3.add(CB_dbgLogState, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogOutputASCII = new JCheckBox();
        CB_dbgLogOutputASCII.setText("");
        panel3.add(CB_dbgLogOutputASCII, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogInputHEX = new JCheckBox();
        CB_dbgLogInputHEX.setText("");
        panel3.add(CB_dbgLogInputHEX, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Записывать принятое в HEX");
        panel3.add(label7, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogInputASCII = new JCheckBox();
        CB_dbgLogInputASCII.setText("");
        panel3.add(CB_dbgLogInputASCII, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Записывать принятое до обработки (ASCII)");
        panel3.add(label8, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogInputParsed = new JCheckBox();
        CB_dbgLogInputParsed.setText("");
        panel3.add(CB_dbgLogInputParsed, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Записывать принятое после преобразования");
        panel3.add(label9, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_dbgLogOutputHEX = new JCheckBox();
        CB_dbgLogOutputHEX.setText("");
        panel3.add(CB_dbgLogOutputHEX, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("Записывать исходящие команды HEX");
        panel3.add(label10, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Разделитель");
        panel4.add(label11, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Ведение лога CSV");
        panel4.add(label12, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TF_csvLogSeparator = new JTextField();
        panel4.add(TF_csvLogSeparator, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        btn_csvLog_Save = new JButton();
        btn_csvLog_Save.setText("Сохранить");
        panel4.add(btn_csvLog_Save, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_csvLogState = new JCheckBox();
        CB_csvLogState.setText("");
        panel4.add(CB_csvLogState, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_csvLogOutputASCII = new JCheckBox();
        CB_csvLogOutputASCII.setText("");
        panel4.add(CB_csvLogOutputASCII, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("Записывать исходящие команды ASCII");
        panel4.add(label13, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_csvLogInputASCII = new JCheckBox();
        CB_csvLogInputASCII.setText("");
        panel4.add(CB_csvLogInputASCII, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label14 = new JLabel();
        label14.setText("Записывать принятое до обработки (ASCII)");
        panel4.add(label14, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CB_csvLogInputParsed = new JCheckBox();
        CB_csvLogInputParsed.setText("");
        panel4.add(CB_csvLogInputParsed, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label15 = new JLabel();
        label15.setText("Записывать принятое после преобразования");
        panel4.add(label15, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return parametrPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
