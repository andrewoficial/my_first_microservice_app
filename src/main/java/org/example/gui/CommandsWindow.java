package org.example.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.example.device.SomeDevice;
import org.example.device.DeviceCommandListClass;
import org.example.device.ProtocolsList;
import org.example.device.command.SingleCommand;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;

import static org.example.utilites.MyUtilities.createDeviceByProtocol;

public class CommandsWindow extends JDialog {

    private JComboBox CB_Protocol;
    private JScrollPane SP_Field;
    private JPanel mainPanel;
    private JTextPane TP_Field;

    public CommandsWindow() {
        setModal(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setContentPane(mainPanel);
        ProtocolsList[] protocolsLists = ProtocolsList.values();
        for (int i = 0; i < protocolsLists.length; i++) {
            CB_Protocol.addItem(protocolsLists[i].getValue());
        }

        CB_Protocol.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (ProtocolsList.getLikeArrayEnum(CB_Protocol.getSelectedIndex()) != null) {

                    for (ProtocolsList protocolsList : protocolsLists) {
                        if (protocolsList.getValue().equals(CB_Protocol.getSelectedItem().toString())) {
                            System.out.println("Found protocol" + protocolsList.getValue());

                            SomeDevice someDevice = createDeviceByProtocol(protocolsList);
                            DeviceCommandListClass deviceCommandListClass = someDevice.getCommandListClass();
                            if (someDevice.getCommandListClass() == null) {
                                TP_Field.setText("Класс с командами не определен для протокола " + protocolsList.getValue());
                                return;
                            }
                            HashMap<String, SingleCommand> commandHashMap = deviceCommandListClass.getCommandPool();
                            if (commandHashMap == null || commandHashMap.isEmpty()) {
                                TP_Field.setText("В классе с командами для протокола " + protocolsList.getValue() + " список команд пуст");
                                System.out.println("В классе с командами для протокола " + protocolsList.getValue() + " список команд пуст");
                                return;
                            }
                            StringBuilder sb = new StringBuilder();
                            for (SingleCommand value : commandHashMap.values()) {
                                sb.append(value.getMapKey());
                                sb.append(" - \t - ");
                                sb.append(value.getDescription());
                                sb.append("\r\n");
                            }
                            TP_Field.setText(sb.toString());
                        }
                    }

                }
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        CB_Protocol = new JComboBox();
        panel1.add(CB_Protocol, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TP_Field = new JTextPane();
        mainPanel.add(TP_Field, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(300, 300), new Dimension(500, 400), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}


/*
        ProtocolsList[] protocolsLists = ProtocolsList.values();
        for (int i = 0; i < protocolsLists.length; i++) {
            CB_Protocol.addItem(protocolsLists[i].getValue());
            if (prop.getLastProtocol().equalsIgnoreCase(protocolsLists[i].getValue())) {
                CB_Protocol.setSelectedIndex(i);
            }
        }
 */