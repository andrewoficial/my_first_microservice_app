package org.example.gui;

import javax.swing.*;

import java.awt.*;
import java.lang.management.ManagementFactory;
import java.text.NumberFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Set;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.sun.management.OperatingSystemMXBean;
import org.apache.log4j.Logger;

public class DebugWindow extends JDialog implements Rendeble {
    private static final Logger log = Logger.getLogger(DebugWindow.class);
    private int countRender = 0;
    private JPanel mainField;
    private JTextArea textArea1;
    private JProgressBar PB_Memory;
    private JProgressBar PB_Cpu;
    private JLabel LB_Cpu;
    private JLabel LB_Memory;
    private JLabel MyLable;
    private JTextField textField1;

    private Runtime runtime = Runtime.getRuntime();

    private NumberFormat format = NumberFormat.getInstance();

    private long timerWinUpdate = System.currentTimeMillis();
    private DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
    private LocalDateTime now = LocalDateTime.now();

    private long maxMemory = runtime.maxMemory();
    private long allocatedMemory = runtime.totalMemory();
    private long freeMemory = runtime.freeMemory();

    private double startSystemAverage;

    private Set<Thread> threadSet;

    public DebugWindow() {
        log.info("Открыто окно с информацией о системе");
        setModal(false);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setContentPane(mainField);
        Thread.currentThread().setName("NARUTO JavaResourceMonitor");
        Set<Thread> threadSet = Thread.getAllStackTraces().keySet();


    }

    public void startMonitor() {
        updateData();
    }

    private void updateData() {
        log.trace("Обновление данных в окне с информацией о системе");
        threadSet = Thread.getAllStackTraces().keySet();
        maxMemory = runtime.maxMemory();
        allocatedMemory = runtime.totalMemory();
        freeMemory = runtime.freeMemory();
        OperatingSystemMXBean osBean = ManagementFactory.getPlatformMXBean(OperatingSystemMXBean.class);
        if (osBean != null) {
            startSystemAverage = osBean.getProcessCpuLoad() * 100;
        }
    }

    public void renderData() {
        updateData();
        StringBuilder sb = new StringBuilder();
        sb.append("free memory: " + format.format(freeMemory / 1024) + "\n");
        sb.append("allocated memory: " + format.format(allocatedMemory / 1024) + "\n");
        sb.append("max memory: " + format.format(maxMemory / 1024) + "\n");
        sb.append("total free memory: " + format.format((freeMemory + (maxMemory - allocatedMemory)) / 1024) + "\n");
        PB_Memory.setMaximum(Math.toIntExact(maxMemory / 1024L));
        PB_Memory.setMinimum(0);
        PB_Memory.setValue(Math.toIntExact(allocatedMemory / 1024L));

        PB_Memory.setMinimum(0);
        PB_Memory.setMinimum(100);
        PB_Cpu.setValue((int) startSystemAverage);
        //System.out.println(startSystemAverage);
        for (Thread thread : threadSet) {
            sb.append("\t");
            sb.append(thread.getName());
            sb.append("\n");
        }
        textArea1.setText(sb.toString());
        countRender++;
        if (countRender > 20) {
            System.gc(); //Runtime.getRuntime().gc();
        }

    }

    @Override
    public boolean isEnable() {
        return this.isShowing();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainField = new JPanel();
        mainField.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainField.setOpaque(true);
        mainField.setPreferredSize(new Dimension(350, 350));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainField.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(350, 350), new Dimension(350, 350), new Dimension(350, 350), 0, false));
        PB_Memory = new JProgressBar();
        panel1.add(PB_Memory, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        textArea1 = new JTextArea();
        textArea1.setEditable(false);
        scrollPane1.setViewportView(textArea1);
        PB_Cpu = new JProgressBar();
        panel1.add(PB_Cpu, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LB_Cpu = new JLabel();
        LB_Cpu.setText("Процессор");
        panel1.add(LB_Cpu, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LB_Memory = new JLabel();
        LB_Memory.setText("Память");
        panel1.add(LB_Memory, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainField.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainField.add(spacer2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainField;
    }

}
